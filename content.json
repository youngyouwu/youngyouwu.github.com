{"meta":{"title":"YoungYouWu","subtitle":null,"description":null,"author":"youngyouwu","url":"https://youngyouwu.github.io","root":"/"},"pages":[{"title":"关于","date":"2019-04-24T04:06:56.939Z","updated":"2019-04-24T04:06:56.939Z","comments":false,"path":"about/index.html","permalink":"https://youngyouwu.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2019-04-24T04:06:56.942Z","updated":"2019-04-24T04:06:56.942Z","comments":false,"path":"categories/index.html","permalink":"https://youngyouwu.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-04-24T04:06:56.945Z","updated":"2019-04-24T04:06:56.945Z","comments":false,"path":"tags/index.html","permalink":"https://youngyouwu.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"spring batch 学习笔记（一）","slug":"spring_batch_01","date":"2020-06-18T09:06:50.964Z","updated":"2020-06-18T09:23:36.277Z","comments":true,"path":"2020/06/18/spring_batch_01/","link":"","permalink":"https://youngyouwu.github.io/2020/06/18/spring_batch_01/","excerpt":"","text":"项目创建官方提供的在线创建项目地址：https://start.spring.io/引入spring batch依赖123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-batch&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.batch&lt;/groupId&gt; &lt;artifactId&gt;spring-batch-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;spring batch需要保存一些信息到数据库，所以还需要加入数据库依赖，这里用的sql serve依赖，你可以换成其他数据库（如MySQL，Oracle等）123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.microsoft.sqlserver&lt;/groupId&gt; &lt;artifactId&gt;mssql-jdbc&lt;/artifactId&gt; &lt;version&gt;6.4.0.jre8&lt;/version&gt;&lt;/dependency&gt;配置好数据库的链接属性123456spring: dataSource: url: jdbc:sqlserver://192.168.01.01;databaseName=spring;charset=utf8; driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver username: sa password: **相关数据表spring batch需要数据库保存信息,下面是在sql server数据库中生成表的schema12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879CREATE TABLE BATCH_JOB_INSTANCE ( JOB_INSTANCE_ID BIGINT NOT NULL PRIMARY KEY , VERSION BIGINT NULL, JOB_NAME VARCHAR(100) NOT NULL, JOB_KEY VARCHAR(32) NOT NULL, constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)) ;CREATE TABLE BATCH_JOB_EXECUTION ( JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY , VERSION BIGINT NULL, JOB_INSTANCE_ID BIGINT NOT NULL, CREATE_TIME DATETIME NOT NULL, START_TIME DATETIME DEFAULT NULL , END_TIME DATETIME DEFAULT NULL , STATUS VARCHAR(10) NULL, EXIT_CODE VARCHAR(2500) NULL, EXIT_MESSAGE VARCHAR(2500) NULL, LAST_UPDATED DATETIME NULL, JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL, constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID) references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)) ;CREATE TABLE BATCH_JOB_EXECUTION_PARAMS ( JOB_EXECUTION_ID BIGINT NOT NULL , TYPE_CD VARCHAR(6) NOT NULL , KEY_NAME VARCHAR(100) NOT NULL , STRING_VAL VARCHAR(250) NULL, DATE_VAL DATETIME DEFAULT NULL , LONG_VAL BIGINT NULL, DOUBLE_VAL DOUBLE PRECISION NULL, IDENTIFYING CHAR(1) NOT NULL , constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID) references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)) ;CREATE TABLE BATCH_STEP_EXECUTION ( STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY , VERSION BIGINT NOT NULL, STEP_NAME VARCHAR(100) NOT NULL, JOB_EXECUTION_ID BIGINT NOT NULL, START_TIME DATETIME NOT NULL , END_TIME DATETIME DEFAULT NULL , STATUS VARCHAR(10) NULL, COMMIT_COUNT BIGINT NULL, READ_COUNT BIGINT NULL, FILTER_COUNT BIGINT NULL, WRITE_COUNT BIGINT NULL, READ_SKIP_COUNT BIGINT NULL, WRITE_SKIP_COUNT BIGINT NULL, PROCESS_SKIP_COUNT BIGINT NULL, ROLLBACK_COUNT BIGINT NULL, EXIT_CODE VARCHAR(2500) NULL, EXIT_MESSAGE VARCHAR(2500) NULL, LAST_UPDATED DATETIME NULL, constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID) references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)) ;CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT ( STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY, SHORT_CONTEXT VARCHAR(2500) NOT NULL, SERIALIZED_CONTEXT TEXT NULL, constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID) references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)) ;CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT ( JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY, SHORT_CONTEXT VARCHAR(2500) NOT NULL, SERIALIZED_CONTEXT TEXT NULL, constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID) references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)) ;CREATE TABLE BATCH_STEP_EXECUTION_SEQ (ID BIGINT IDENTITY);CREATE TABLE BATCH_JOB_EXECUTION_SEQ (ID BIGINT IDENTITY);CREATE TABLE BATCH_JOB_SEQ (ID BIGINT IDENTITY);Hello world将项目导入到开发工具中，例如IEDA,等依赖加载完，就可以编写第一个hello world程序了这是官方提供的hello world地址：https://spring.io/guides/gs/batch-processing/Configuration新建文件com.example.demo.config.BatchConfiguration.java1234567891011@Configuration@EnableBatchProcessingpublic class BatchConfiguration &#123; @Autowired public JobBuilderFactory jobBuilderFactory; @Autowired public StepBuilderFactory stepBuilderFactory;&#125;注解@EnableBatchProcessing表示启动spring batchjobBuilderFactory和stepBuilderFactory这两个属性spring容器会自动创建，直接注入就可使用，从名字就可以看出他们的作用就是用来创建job和step的创建Job和step123456789101112131415@Beanpublic Job myJob(Step step1) &#123; return jobBuilderFactory.get(\"myJob\") .flow(step1) .end() .build();&#125;@Beanpublic Step step1() &#123; return stepBuilderFactory.get(\"step1\") .&lt;Person, Person&gt; chunk(10) .reader(reader()) .writer(writer()) .build();&#125;Person是一个POJO，可随意定义，例如：123456public class Person &#123; private String lastName; private String firstName; // gertter，sertter...&#125;Writer1234567891011@Beanpublic ItemWriter&lt;Person&gt; writer() &#123; return new ItemWriter&lt;Person&gt;() &#123; @Override public void write(List&lt;? extends Person&gt; list) throws Exception &#123; list.forEach(it -&gt; &#123; log.info(it.toString()); &#125;); &#125; &#125;;&#125;Reader1234567891011@Beanpublic FlatFileItemReader&lt;Person&gt; reader(FieldSetMapper&lt;Person&gt; personMapper) &#123; return new FlatFileItemReaderBuilder&lt;Person&gt;() .name(\"PersonItemReader\") .resource(new ClassPathResource(\"Person.csv\")) // .linesToSkip(1) // 忽略第一行 .delimited() .names(\"lastName\", \"firstName\") .fieldSetMapper(userMapper) .build();&#125;Mapper123456789101112@Beanpublic FieldSetMapper&lt;UserId&gt; personMapper() &#123; return new FieldSetMapper&lt;UserId&gt;() &#123; @Override public UserId mapFieldSet(FieldSet fs) throws BindException &#123; Person person = new Person(); person.setLastName(fs.readString(\"lastName\")); person.setFirstName(fs.readString(\"firstName\")); return person; &#125; &#125;;&#125;","categories":[{"name":"spring","slug":"spring","permalink":"https://youngyouwu.github.io/categories/spring/"}],"tags":[{"name":"spring batch","slug":"spring-batch","permalink":"https://youngyouwu.github.io/tags/spring-batch/"}]},{"title":"mysql用户帐号管理","slug":"mysql","date":"2019-04-25T04:50:02.565Z","updated":"2019-04-25T05:39:25.685Z","comments":true,"path":"2019/04/25/mysql/","link":"","permalink":"https://youngyouwu.github.io/2019/04/25/mysql/","excerpt":"","text":"用户登录要使用命令行客户端连接到MySQL服务器，请根据需要为要使用的帐户指定用户名和密码选项12shell&gt; mysql --user=finley --password db_nameshell&gt; mysql -u finley -p db_name如果省略了命令行上的–password或-p选项后面的密码值，客户端将提示输入密码12shell&gt; mysql --user=finley --password=password db_nameshell&gt; mysql -u finley -ppassword db_name如果使用-p选项，则-p与密码值之间没有空格添加用户帐号连接到服务器后root，你可以添加新帐户1234mysql&gt; CREATE USER &apos;finley&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;password&apos;;mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;finley&apos;@&apos;localhost&apos; WITH GRANT OPTION;mysql&gt; CREATE USER &apos;finley&apos;@&apos;%&apos; IDENTIFIED BY &apos;password&apos;;mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;finley&apos;@&apos;%&apos; WITH GRANT OPTION;创建的帐户具有以下属性两个帐户的用户名为finley。两者都是具有完全权限的超级用户帐户。’finley’@’localhost’帐户只能在从本地主机连接时使用。’finley’@’%’帐户使用 ‘%’通配符作为主机部分，因此可用于从任何主机连接要查看帐户的权限，可以使用 SHOW GRANTS123456mysql&gt; SHOW GRANTS FOR &apos;admin&apos;@&apos;localhost&apos;;+-----------------------------------------------------+| Grants for admin@localhost |+-----------------------------------------------------+| GRANT RELOAD, PROCESS ON *.* TO &apos;admin&apos;@&apos;localhost&apos; |+-----------------------------------------------------+下一个示例创建三个帐户并授予他们对特定数据库的访问权限。他们每个用户名 custom和密码为 password123456mysql&gt; CREATE USER &apos;custom&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;password&apos;;mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP ON bankaccount.* TO &apos;custom&apos;@&apos;localhost&apos;;mysql&gt; CREATE USER &apos;custom&apos;@&apos;host47.example.com&apos; IDENTIFIED BY &apos;password&apos;;mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP ON expenses.* TO &apos;custom&apos;@&apos;host47.example.com&apos;;mysql&gt; CREATE USER &apos;custom&apos;@&apos;%.example.com&apos; IDENTIFIED BY &apos;password&apos;;mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP ON customer.* TO &apos;custom&apos;@&apos;%.example.com&apos;;三个帐户可以使用如下第一个帐户可以访问 bankaccount数据库，但只能从本地主机访问。第二个帐户可以访问expenses 数据库，但只能从主机访问 host47.example.com。第三个帐户可以customer 从example.com 域中的任何主机访问数据库。由于使用%帐户名称的主机部分中的通配符，该帐户可以访问域中所有计算机。删除用户帐号要删除帐户，使用DROP USER语句1mysql&gt; DROP USER &apos;jeffrey&apos;@&apos;localhost&apos;;修改用户帐号密码SET PASSWORD可以使用或不使用FOR明确命名用户帐户的子句使用子句，该语句为指定帐户设置密码1SET PASSWORD = &apos;auth_string&apos;;不使用子句，该语句设置当前用户的密码1SET PASSWORD = &apos;auth_string&apos;;回收用户帐号权限回收用户指定的权限，如回收INSERT权限1REVOKE INSERT ON *.* FROM &apos;jeffrey&apos;@&apos;localhost&apos;;要撤消用户所有权限，可以使用下面语法1REVOKE ALL PRIVILEGES, GRANT OPTION FROM user [, user] ...","categories":[{"name":"数据库","slug":"数据库","permalink":"https://youngyouwu.github.io/categories/数据库/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://youngyouwu.github.io/tags/MySQL/"},{"name":"数据库","slug":"数据库","permalink":"https://youngyouwu.github.io/tags/数据库/"}]},{"title":"Java语言","slug":"java","date":"2019-04-24T03:11:31.552Z","updated":"2019-04-24T06:20:43.091Z","comments":true,"path":"2019/04/24/java/","link":"","permalink":"https://youngyouwu.github.io/2019/04/24/java/","excerpt":"","text":"Java从入门到秃顶java是一门面向对象的编程语言……万物起源-HelloWorld12345public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println(&quot;Hello world!&quot;); &#125;&#125;","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://youngyouwu.github.io/categories/编程语言/"}],"tags":[{"name":"java","slug":"java","permalink":"https://youngyouwu.github.io/tags/java/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-04-24T02:36:50.721Z","updated":"2019-04-25T04:42:21.470Z","comments":true,"path":"2019/04/24/hello-world/","link":"","permalink":"https://youngyouwu.github.io/2019/04/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new \"My New Post\"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment","categories":[{"name":"框架","slug":"框架","permalink":"https://youngyouwu.github.io/categories/框架/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://youngyouwu.github.io/tags/blog/"},{"name":"document","slug":"document","permalink":"https://youngyouwu.github.io/tags/document/"}]}]}